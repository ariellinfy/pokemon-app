{"version":3,"sources":["components/SearchBox/searchbox.component.jsx","components/Types/types.component.jsx","components/Card/card.component.jsx","components/CardList/cardList.component.jsx","loader.svg","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","autoFocus","Types","typeName","Card","id","name","types","alt","src","map","i","CardList","pokemons","pokemon","App","fetchKantoPokemon","a","fetch","response","json","results","fetchPokemonData","pokeData","Promise","all","pokeArray","pokePartialData","poke","setState","url","onSearchChange","event","searchfield","target","value","state","this","filteredPokemons","filter","toLowerCase","includes","length","searchField","loader","React","Component","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4407844c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './searchbox.style.css';\r\n\r\nconst SearchBox = ({ searchChange }) => (\r\n    <div className='searchbox'>\r\n        <input \r\n            className='search-input' \r\n            type='search' \r\n            placeholder='search pokemons' \r\n            onChange={searchChange}\r\n            autoFocus\r\n        />\r\n    </div>\r\n)\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Types = ({ typeName }) => (\r\n    <li>{typeName}</li>\r\n);\r\n\r\nexport default Types;","import React from 'react';\r\nimport Types from '../Types/types.component';\r\nimport './card.style.css';\r\n\r\nconst Card = ({ id, name, types }) => {\r\n    return (\r\n        <div className='card-container'>\r\n            <img alt='pokemon' className='poke-image' src={`https://pokeres.bastionbot.org/images/pokemon/${id}.png`} />\r\n            <div className='poke-detail'>\r\n                <p className='poke-id'>{`#${id}`}</p>\r\n                <h2 className='poke-name'>{name}</h2>\r\n                <div className='poke-types'>\r\n                    <ul>\r\n                    {\r\n                        types.map((type, i) => (\r\n                            <Types key={i} typeName={type.type.name} />\r\n                        ))\r\n                    }\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Card/card.component';\r\nimport './cardList.style.css';\r\n\r\nconst CardList = ({ pokemons }) => {\r\n    return(\r\n    <div className='cardlist-container'>\r\n        {\r\n            pokemons.map(pokemon => (\r\n                <Card key={pokemon.id} id={pokemon.id} name={pokemon.name} types={pokemon.types} />\r\n            ))\r\n        }\r\n    </div>\r\n)};\r\n\r\nexport default CardList;","export default __webpack_public_path__ + \"static/media/loader.e9f1a275.svg\";","import React from 'react';\nimport SearchBox from './components/SearchBox/searchbox.component';\nimport CardList from './components/CardList/cardList.component';\nimport './App.css';\nimport loader from './loader.svg';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      pokemons: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount() {\n    this.fetchKantoPokemon();\n  }\n\n  fetchKantoPokemon = async () => {\n    const response = await fetch('https://pokeapi.co/api/v2/pokemon?limit=151');\n    const pokemons = await response.json();\n    const pokeData = await pokemons.results.map(pokemon => this.fetchPokemonData(pokemon));\n    const pokeArray = await Promise.all(pokeData);\n    const pokePartialData = pokeArray.map((poke, i) => {\n      return pokeArray[i] = {\n        id: poke.id,\n        name: poke.name,\n        types: poke.types\n      }\n    })\n    this.setState({ pokemons: pokePartialData });\n  }\n\n  fetchPokemonData = async (pokemon) => {\n    const response = await fetch(pokemon.url);\n    const pokeData = await response.json();\n    return pokeData;\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value });\n  }\n\n  render() {\n    const { pokemons, searchfield } = this.state;\n    const filteredPokemons = pokemons.filter(pokemon => {\n      return pokemon.name.toLowerCase().includes(searchfield.toLowerCase())\n    });\n    return !pokemons.length ?\n      (\n        <div className=\"App loading\">\n          <h1>Loading</h1>\n          <img alt='loading' src={loader} />\n          <img alt='loading' src={loader} />\n          <img alt='loading' src={loader} />\n        </div>\n      )\n        :   \n      (\n        <div className=\"App\">\n          <h1>Pokemon</h1>\n          <SearchBox searchField={searchfield} searchChange={this.onSearchChange} />\n          <CardList pokemons={filteredPokemons} />\n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}